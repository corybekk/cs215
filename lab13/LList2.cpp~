#include "LList2.h" 

// Default constructor for the LNode class
// Create a new node with data=0 and no next node
LList::LNode::LNode () { 
        data = 0; 
        next = NULL;
	prev = NULL;
} 

// Default constructor for the LList class
// Create an empty list 
LList::LList () { 
        first = NULL; 
	last = NULL;
	size = 0; 
}

// Copy constructor for the LList class 
// Copy the other list, element by element
LList::LList (const LList & other) { 
        first = NULL; 
	last =NULL;
        size = 0; 
        for (LNode * n = other.first; n != NULL; n = n->next) {
                InsertLast (n->data); 
	}
} 

// Destructor for the LList class
// Delete from the beginning of the list until the list is empty
LList::~LList () { 
  while (first != NULL) {
    DeleteFirst(); 
  }
} 

// Overloaded assignment operator
LList& LList::operator = (const LList & other) {

	// Check for auto-assignment 
        if (this == &other) {
                return * this; 
	}
        while (first != NULL) {// delete every node of the list, so the new list can be
	  DeleteFirst();  // copied over...
	}
        for (LNode * n = other.first; n != NULL; n = n->next) {
	  InsertLast (n->data);
	}
        return * this; 
} 

// Equality operator
// For two lists to be equal, they must have exactly the same elements 
bool LList::operator == (const LList & other) const { 

	// If the sizes are not equal, the lists are
	// not equal
        if (size != other.size) {
                return false; 
	}

	// Pointers for traversing the two lists
        LNode * n = first; 
        LNode * m = other.first; 

        while (n != NULL) {
                if (n->data != m->data) {
                        return false;
		}
                n = n->next; 
                m = m->next; 
        } 
        return true; 
} 

// Accessor function for size 
int LList::Size () const { 
        return size; 
} 

// Print the list 
ostream & operator << (ostream & outs, const LList & L) { 
        if (L.first == NULL) {
                return outs;
	}
        outs << L.first->data; 
        for (LList::LNode * n = L.first->next; n != NULL; n = n->next) {
                outs << ' ' << n->data;
	} 
        return outs; 
} 

// Insert "value" at the beginning of the list 
bool LList::InsertFirst (const int & value) {

  LNode * ptr = new LNode;
 
  if(ptr==NULL)return false; //checks to see if it can allocate space
  if(size == 0){
    ptr->next = NULL; // next is null because it is the last node and first node
    ptr->prev = NULL; // prev should be null because it is the first node
    ptr->data = value; 
    first = ptr; // makes first point at ptr
    last = ptr; // makes last point at ptr because technically it is the last node
    return true;
  }

  LNode * tmp = first;// tmp points to the same thing as first
  ptr->data = value;
  ptr->next = tmp;// makes ptr point to the same node tmp is pointing too, which is 1st
  ptr->prev = NULL;// points at null because it is the 1st node in the list
  tmp->prev = ptr;// makes tmp->next prev pointer point at tmp 
  first = ptr;
  size++;
  return true; 
} 

// Insert "value" at the end of the list 
bool LList::InsertLast (const int & value) {

  if(size == 0){
    InsertFirst(value);
    return true;
  }

  LNode * ptr = new LNode;

  if(ptr == NULL) return false;

  LNode * tmp = last;// tmp points to the last pointer, which becomes the 2nd to last 
  ptr->data = value;
  ptr->next = NULL;// set to null because it is the last node
  tmp->next = ptr; // connects the 2nd to last node to the last node "ptr"
  ptr->prev = tmp; //ptr's prev is pointing to the second to last node
  last = ptr;// last points to ptr, which also means tmp is pointing at the 2nd to lastNod
  size++;
  return true;
} 

// Delete the element at the beginning of the list 
bool LList::DeleteFirst () { 

  if(size == 0)return false;
  if(size == 1){
    delete first;
    first = NULL;// basically disconnects the next node, which deletes it
    last = NULL;
    size--;
    return true;
  }

  LNode * tmp;
  tmp = first;// saves what first is pointing to into tmp. "this is the 1st node"
  first = first->next;// makes first point to the 3rd node
  first->prev=NULL; // makes the 2rd Node's "prev" point point to NULL
  delete tmp;
  size--;
  return true; 
} 

// Delete the element at the end of the list 
bool LList::DeleteLast () {

  if(size==0)return false;
  if(size==1){
    DeleteFirst();
    return true;
  }
  LNode * tmp = last;
  last = last->prev;
  last->next = NULL;
  delete tmp;
  size--;

  return true; 
} 

